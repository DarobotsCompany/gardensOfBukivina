import {
    WebSocketGateway,
    WebSocketServer,
    SubscribeMessage,
    OnGatewayInit,
    OnGatewayConnection,
    OnGatewayDisconnect,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { JwtService } from '@nestjs/jwt';
import { IAdminJwtPayload } from '../../auth/interfaces/admin-jwt-payload.interface';

@WebSocketGateway({ cors: { origin: '*', }})
export class ChatGateway implements OnGatewayInit, OnGatewayConnection, OnGatewayDisconnect {
    @WebSocketServer() server: Server;

    constructor(
      private readonly jwtService: JwtService,
    ) {}

    afterInit(server: Server) {
        console.log('‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ');
    }

    async handleConnection(client: Socket) {
        try {
            const token = client.handshake.query.token as string;
            if (!token) throw new Error('–¢–æ–∫–µ–Ω –≤—ñ–¥—Å—É—Ç–Ω—ñ–π');

            const payload: IAdminJwtPayload = this.jwtService.verify(token, {
                secret: process.env.JWT_ADMIN_SECRET,
            });

            client.data.user = payload;
            const roomName = 'room1';
            client.join(roomName);
            console.log(`üë§ ${payload.username} –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –∫—ñ–º–Ω–∞—Ç–∏ ${roomName}`);

        } catch (err) {
            console.log('‚ùå –ü–æ–º–∏–ª–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó WebSocket:', err.message);
            client.disconnect();
        }
    }

    handleDisconnect(client: Socket) {
        if (client.data.user) {
            console.log(`üîå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${client.data.user.username} –≤—ñ–¥–∫–ª—é—á–∏–≤—Å—è`);
        }
    }

    @SubscribeMessage('leaveRoom')
    async handleLeaveRoom(client: Socket, roomId: number) {
        const roomName = 'room' + roomId;
        client.leave(roomName);
        console.log(`üë§ ${client.data.user.username} –≤–∏–π—à–æ–≤ –∑ –∫—ñ–º–Ω–∞—Ç–∏ ${roomName}`);
    }

    @SubscribeMessage('newMessage')
    async handleMessage(client: Socket, payload: { roomId: number; message: string }) {
        const roomName = 'room' + payload.roomId;
        console.log(`‚úâÔ∏è –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ ${client.data.user.username} –≤ ${roomName}: ${payload.message}`);

        this.server.to(roomName).emit('newMessage', {
            from: client.data.user.username,
            message: payload.message,
            sentAt: new Date().toISOString(),
        });
    }

    sendMessageToRoom(roomId: number, message: { from: string; message: string }) {
        const roomName = 'room' + roomId;
        this.server.to(roomName).emit('newMessage', {
            from: message.from,
            message: message.message,
            sentAt: new Date().toISOString(),
        });
    }
}
