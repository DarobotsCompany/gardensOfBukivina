import { Injectable } from '@nestjs/common';
import { Ctx, InjectBot, On, Start, Update } from 'nestjs-telegraf';
import { Context, Telegraf } from 'telegraf';
import { UsersService } from '../../users/services/users.service';
import { ISessionContext } from '../interfaces/session-context.interface';

@Update()
@Injectable()
export class BotAuthService {
    constructor(
        @InjectBot('bot') private readonly bot: Telegraf<Context>,
        private readonly usersService: UsersService
    ) {}

    @Start()
    async start(@Ctx() ctx: ISessionContext): Promise<void> {
        const userTg = ctx.from;
        if (!userTg) return;

        const telegramId = userTg.id;

        let user = await this.usersService.getUser({ where: { telegramId } });

        const userData = {
            telegramId,
            username: userTg.username || "",
            fullName: `${userTg.first_name ?? ''} ${userTg.last_name ?? ''}`.trim(),
        };

        if (user) {
            await this.usersService.updateUser(user.id, userData);
            ctx.session.user = user;
        } else {
            const newUser = await this.usersService.createUser(userData);
            console.log(newUser)
            ctx.session.user = newUser;
        }

        await ctx.reply('–ü—Ä–∏–≤—ñ—Ç! üëã –Ø - —Ç–≤—ñ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ —Ç–∞ –∑—Ä—É—á–Ω–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω—å. –ì–æ—Ç–æ–≤—ñ –ø–æ—á–∞—Ç–∏? –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –Ω–æ–º–µ—Ä–æ–º" üëá', {
            reply_markup: {
                keyboard: [
                    [
                        {
                            text: 'üìû –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –Ω–æ–º–µ—Ä',
                            request_contact: true,
                        },
                    ],
                ],
                resize_keyboard: true,
            },
        });
    }

    @On('contact')
    async handleContact(@Ctx() ctx: ISessionContext): Promise<void> {
        const message = ctx.message;

        if (!message || !('contact' in message)) {
            console.warn('No contact in message');
            return;
        }

        const phone = message.contact.phone_number;
        const chatId = ctx.chat?.id;

        if (!chatId) {
            console.warn('No chat ID');
            return;
        }

        const user = ctx.session?.user;

        user && await this.usersService.updateUser(user.id, { phone });

        await ctx.telegram.sendMessage(chatId,
            '‚úÖ –ì–æ—Ç–æ–≤–æ! –ó–∞–ª–∏—à–∏–ª–æ—Å—å —Ç—Ä–æ—Ö–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó, —â–æ–± –º–∏ –º–æ–≥–ª–∏ –¥–æ—Å—Ç–∞–≤–∏—Ç–∏ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ —ñ–º º—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ', {
            reply_markup: {
                remove_keyboard: true,
            },
        });

        ctx.session.awaitingFullName = true;
    }
}