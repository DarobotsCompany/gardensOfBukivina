import { Injectable } from '@nestjs/common';
import { Ctx, Hears, InjectBot, On, Update } from 'nestjs-telegraf';
import { ISessionContext } from '../interfaces/session-context.interface';
import { BotTriggers } from '../constants/bot-triggers';
import { Context, Telegraf } from 'telegraf';
import { menuKeyboard } from '../keyboards/menu.keyboards';
import { ChatsService } from 'src/admin/chats/services/chats.service';

@Update()
@Injectable()
export class BotMenuService {
    constructor(
        @InjectBot('bot') private readonly bot: Telegraf<Context>,
        private readonly chatsService: ChatsService
    ) {}

    @Hears(BotTriggers.editorChoice)
    async onEditorChoice(@Ctx() ctx: ISessionContext) {
        await ctx.reply('–¢—É—Ç –±—É–¥–µ –≤–∏–±—ñ—Ä —Ä–µ–¥–∞–∫—Ü—ñ—ó üìö');
    }

    @Hears(BotTriggers.searchByName)
    async onSearchByName(@Ctx() ctx: ISessionContext) {
        await ctx.reply('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É –¥–ª—è –ø–æ—à—É–∫—É üîé');
    }

    @Hears(BotTriggers.cart)
    async onCart(@Ctx() ctx: ISessionContext) {
        await ctx.reply('–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π üõí');
    }

    @Hears(BotTriggers.orders)
    async onOrders(@Ctx() ctx: ISessionContext) {
        await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–∞–º–æ–≤–ª–µ–Ω—å üì¶');
    }

    @Hears(BotTriggers.help)
    async onHelp(@Ctx() ctx: ISessionContext) {
        await ctx.reply('–Ø–∫ –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏? üßë‚Äçüíª');
    }

    @Hears(BotTriggers.info)
    async onInfo(@Ctx() ctx: ISessionContext) {
        await ctx.reply('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Å–µ—Ä–≤—ñ—Å ‚ö†Ô∏èüñã');
    }

    @Hears(BotTriggers.support)
    async onSupport(@Ctx() ctx: ISessionContext) {
        await ctx.reply('–ù–∞–ø–∏—à—ñ—Ç—å –Ω–∞–º, —ñ –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–º–æ üí¨', {
            reply_markup: {
                keyboard: [[ { text: BotTriggers.completeChat }]],
                resize_keyboard: true,
            },
        });

        ctx.session.chat = true;
    }

    @Hears(BotTriggers.completeChat)
    async onEndChat(@Ctx() ctx: ISessionContext) {
        ctx.session.chat = false;
        const telegramUserId = ctx.from?.id

        if (!telegramUserId) {
            await ctx.reply('–ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤–∞—à ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.');
            await ctx.reply('‚úÖ –í–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é', {
                reply_markup: {
                    keyboard: menuKeyboard,
                    resize_keyboard: true,
                },
            });
            return
        }

        await this.chatsService.closeChatByTelegramId(telegramUserId);

        await ctx.reply('‚úÖ –í–∏ —É –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é', {
            reply_markup: {
                keyboard: menuKeyboard,
                resize_keyboard: true,
            },
        });
    }
}
